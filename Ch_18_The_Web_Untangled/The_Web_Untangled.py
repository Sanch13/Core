import string, pickle

"""В 1989 году английский ученый Тим Бернерс-Ли впервые внес предложение помочь распространять
информацию внутри CERN, а также среди всего исследовательского сообщества. Он назвал
его World Wide Web (Всемирная паутина) и довольно быстро выделил три основные идеи, которые должны 
были лечь в основу ее дизайна:
- HTTP (Hypertext Transfer Protocol — протокол передачи гипертекста) — протокол для веб-клиентов и 
    серверов для обмена запросами и ответами;
- HTML (Hypertext Markup Language — гипертекстовый язык разметки) — формат для представления
    результатов;
- URL (Uniform Resource Locator — единообразный локатор ресурса) — способ уникально обозначить
    сервер и ресурс на этом сервере."""
"""В самом простом варианте использования веб-клиент соединяется с веб-сервером с помощью
протокола HTTP, запрашивает URL и получает HTML."""
"""Python особенно хорош для работы в Интернете на любом из таких уровней, как:
- клиенты для удаленного доступа;
- серверы, предоставляющие данные для сайтов и веб-API;
- веб-API и сервисы, позволяющие обмениваться данными другими способами, отличающимися от 
просматриваемых веб-страниц."""

"""Веб-клиенты
Низкоуровневая система проводящих путей Интернета называется 
Transmission Control Protocol/Internet Protocol (протокол управления передачей/интернетпротокол) 
или просто TCP/IP. Он перемещает байты между компьютерами, но не обращает внимания на то, что они
значат. Это работа высокоуровневых протоколов — определений синтаксиса для некоторых целей. 
HTTP — стандартный протокол для обмена данными в Сети. Всемирная паутина — это клиент-серверная
система. Клиент делает запрос серверу: он открывает соединение TCP/IP, отправляет URL и другую 
информацию с помощью HTTP и получает ответ. Формат ответа также определяется протоколом HTTP. 
Он включает в себя статус запроса и (в том случае, если запрос выполнен успешно) данные и формат
ответа. Самый известный веб-клиент — это браузер. Он может создавать HTTP-запросы несколькими 
способами. Вы можете инициировать запрос вручную, написав URL в адресной строке или нажав ссылку
на веб-странице. Очень часто для отображения сайта используются возвращаемые данные: 
HTML-документы, файлы JavaScript, файлы CSS и изображения, но данные могут быть любого типа, в том
числе и не предназначенные для отображения. Важный аспект HTTP — этот протокол не имеет состояния. 
Каждое создаваемое вами соединение HTTP не зависит от других. Это упрощает базовые операции, но
усложняет другие. Рассмотрим несколько примеров таких усложнений.
- Кэширование. Удаленный контент, который не меняется, должен быть сохранен веб-клиентом и 
    использован для того, чтобы не загружать его с сервера снова.
- Сессии. Интернет-магазин должен запоминать содержимое вашей корзины.
- Аутентификация. Сайты, которые требуют ваши имя пользователя и пароль, должны запоминать их, 
    пока вы авторизованы. 
Решения для описанных усложнений включают в себя cookie, в которых сервер
отправляет клиенту довольно специфическую информацию, позволяющую их распознать, когда клиент 
отправляет эти файлы назад."""

"""Стандартные веб-библиотеки Python
http управляет всеми деталями клиент-серверного взаимодействия HTTP:
- client выполняет всю работу на стороне клиента;
- server помогает написать веб-сервер Python;
- cookies и cookiejar управляют cookies, которые сохраняют данные между посещениями;
urllib работает на базе http:
- request обрабатывает клиентские запросы;
- response обрабатывает ответы сервера;
- parse разбивает URL на части.
"""
"""Воспользуемся стандартной библиотекой с целью получить что-либо с сайта."""
import urllib.request as ur
url = 'http://www.example.com/'
conn = ur.urlopen(url)
# print(conn)  # <http.client.HTTPResponse object at 0x0000017F1E355DF0>
# with open('example_com.txt', 'wt', encoding='utf-8') as file:
#     for el in conn:
#         file.write(el.decode("utf-8"))    # check example_com
# print(conn.status)  # 200. Значение 200 означает, что все прошло гладко.
"""Существуют десятки кодов статуса HTTP, объединенных в пять диапазонов в соответствии с их
первой цифрой (сотни):
- 1xx (информация) — сервер получил запрос, но имеет некую дополнительную информацию для клиента;
- 2xx (успех) — сработало, каждый код успеха, кроме 200, сообщает дополнительные детали;
- 3xx (перенаправление) — ресурс был перемещен, поэтому ответ возвращает клиенту новый URL;
- 4xx (ошибка клиента) — некие проблемы на стороне клиента, например знаменитая ошибка 404 
    (ресурс не найден). Код 418 (I’m a teapot) был первоапрельской шуткой;
- 5xx (ошибка сервера) — код 500 — общая ошибка. Вы можете встретить ошибку 502 (ошибочный шлюз), 
    если произошел разрыв связи между веб-сервером и машинным интерфейсом."""
"""Для большинства задач, связанных с разработкой веб-клиентов, 
проще использовать библиотеку requests."""
import requests
resp = requests.get(url)
# print(resp)               # <Response [200]>
# print(resp.text[0:100])

"""Веб-серверы
Веб-разработчики обнаружили, что Python хорошо подходит для написания веб-серверов и программ, 
работающих на серверной стороне. Это привело к появлению такого множества фреймворков. 
Веб-фреймворк предоставляет функции, позволяющие построить сайты, поэтому может решать большее
количество задач, чем простой веб-сервер (HTTP)."""

"""Простейший веб-сервер Python
Вы можете запустить простейший веб-сервер, просто введя одну строку кода Python:
$ python -m http.server
С помощью этой строки вы реализуете примитивный Python HTTP-сервер.
Если не возникло никаких проблем, то вы увидите исходное сообщение о статусе:
Serving HTTP on 0.0.0.0 port 8000 ...
Теперь вы можете запрашивать файлы, чьи пути относительны к вашему текущему каталогу, и они будут 
вам возвращены. Если вы введете в своем браузере строку http://localhost:8000, 
то должны увидеть список каталогов и сервер выведет на экран строки обращения к журналам, 
например такие:
127.0.0.1 - - [10/Oct/2022 09:40:29] "GET / HTTP/1.1" 200 -
127.0.0.1 - - [10/Oct/2022 09:40:38] "GET /Ch_17_Data_in_Space_Networks/ HTTP/1.1" 200 -
127.0.0.1 - - [10/Oct/2022 09:43:02] "GET / HTTP/1.1" 200 -
127.0.0.1 - - [10/Oct/2022 09:43:06] "GET /Ch_10_Objects_and_Classes/ HTTP/1.1" 200 -
127.0.0.1 - - [10/Oct/2022 09:43:19] "GET /Ch_2_Data_Types/ HTTP/1.1" 200 -
127.0.0.1 - - [10/Oct/2022 09:43:21] "GET /Ch_2_Data_Types/Python_types.py HTTP/1.1" 200 -
"""
"""Элементы localhost и 127.0.0.1 являются для TCP синонимами вашего локального компьютера, поэтому
сработают независимо от того, подключены ли вы к Интернету. 
Вы можете интерпретировать эти строки следующим образом:
- 127.0.0.1 — IP-адрес клиента;
- первый символ - — имя удаленного пользователя, если он присутствует;
- второй символ - — имя авторизующегося пользователя, если требуется;
- [10/Oct/2022 09:40:29] — дата и время доступа;
- "GET/HTTP/1.1" — команда, отправленная веб-серверу:
    - метод HTTP (GET);
    - запрошенный ресурс (/, верхний уровень);
    - версия HTTP (HTTP/1.1);
- последнее число (200) — код статуса HTTP, возвращенный веб-сервером."""
"""Щелкните на любом файле. и сервер занесет этот запрос в журнал.
По умолчанию используется порт 8000, но вы можете указать любой другой.
Этот сервер, написанный только на Python, лучше всего подходит для быстрых тестов. Вы можете 
выключить его, убив его процесс нажатием Ctrl+C.
"""
"""Традиционные веб-серверы, такие как Apache и NGINX, гораздо быстрее работают со статическими
файлами. Кроме того, этот простой сервер не может взаимодействовать с динамическим содержимым, 
в отличие от более продвинутых серверов, принимающих дополнительные параметры."""











