PythonCore
1)Типы данных их примеры
Ожидания: либо перечисление типов данных либо их классификация
2) Расскажи внутреннее устройство словаря
Ожидаемый ответ: хеш-таблица 
3) Какие проблемы возникают при использовании хеш-таблицы и способы их решения
Ожидаемый ответ: коллизии, метод цепочек и метод открытой адресации
4) Какие типы данных использовала из модуля коллектион
Ожидаемый ответ: orderedict, defultedict, nametupled
5) Что такое декоратор? 
Ожидаемый ответ: термин декоратор
6) Какие декораторы приходилось писать?
7) Что такое контекстные менеджеры?
8) Приходилось ли использовать свои контекстные менеджеры?
9) Для чего используются Лямбда-функции?
10) Что такое генераторы и итераторы?
11) Как можно создать генератор?
12) как можно создать итератор?
13) Назови десять встроенных функций.
14) Какие стандартные модули приходилось использовать?
16) Какие принципы ООП ты знаешь в Python?
17) Что такое мета-классы?

Устройство интерпретатора
1) Что такое GIL?
2) В чем плюсы и минусы GIL на твой взгляд?
3) Как добиться реальной параллельности в Python коде?
4) В чем разница асинхронного и многопоточного кода?
5) Какие проблемы многопоточности ты знаешь?
6) В каких ситуация и что лучше использовать асинхронность, многопоточность и мультипроцессорность?
7) Что такое сборщик мусора и как он работает?
8) Какие проблемы есть с подсчётом ссылок и как они решаются в питоне?
9) Как работает механизм аллоцирования памяти в питоне?
10) Как происходит процесс удаления из памяти?
11) Как работает сборщик мусора в связке GIL?
Принципы написания кода:
1) SOLID
2) KISS
3) DRY
RESTful API/http и https
1) Что такое htttp и https?И чем они отличаются?
2) Модель клиент-серверного общения
3) Что такое REST и его принципы?
4) Какие ты знаешь http методы и за что каждый из них отвечает?
Django
1) Какие плюсы и минусы Django ты можешь выделить?
2) Что такое ORM и его плюсы и минусы?
3) Что такое n+1 проблема и как она решается в Django?
4) Приходилось ли использовать функции агрегации? Для чего используются методы annotate и aggregate?
5) Приходилось ли использовать Q и F выражения?
6) Как сделать GROUPBY с помощью Django ORM?
7) В чем различие метода фильтра и exclude?
8) Является ли класс мета в Django метаклассом?
Django REST
1) Какие вьюшки ты используешь?
2) Какие плюсы использования вьюх написанных на классах?
3) Что такое стерилизаторы? Для чего они используются? 
Базы данных
1) Какие типы баз данных ты знаешь? И чем они отличаются?
А) Реляционные 
	2.1) Какие плюсы PostgreSQL ты можешь выделить?
2) Что такое индексы? И какие индексы ты знаешь?
3) Какие joinы ты знаешь? И расскажи про каждый из них поподробнее
4) Какие виды связи бывают между таблицами? И как они реализуются на уровне баз данных?
5) PrimaryKey что это такое?
6) Constraintы в базах данных?
7) Назови принципы ACID?
8) Расскажи про CAP теорема?
9) Что такое нормализация и денормализация баз данных?
10) Назови уровни сериализации баз данных?
11) Какой уровень сериализации используются в PostgreSQL и какой в MySQL?
12) Проверить уровень знания SQL синтаксиса.
Б) Нереляционные 
      13) Какие нереляционные базы данных ты использовал? И в каких целях?
      14) В каком формате данные хранятся в MongoDB и Redis?
      15) Какие различия между MongoDB и Redis?
Брокеры сообщений
1) Приходилось ли использовать брокеры сообщений? И если да, то какие?
2) Внутреннее устройство RabbitMQ?
3) Внутреннее устройство Kafka?
4) Какие различия RabbitMQ и Kafka ты знаешь?
Архитектура приложений
1) Какие архитектуры приложений ты знаешь?
2) Какие плюсы использования микросервисной архитектуры?
3) Способы построения общения между микросервисами?
4) В каком случае лучше использовать монолит?
5) Какие плюсы использования serverless?
Облачные платформы
1) Приходилось ли работать с облачными платформами? Если да, то с какими?
2) Расскажи про сервисы с которыми ты работал?
СI/CD
1) Что такое CI и CD?
2) Какие инструменты используются при реализации CI и CD?
3) Приходилось ли работать с докером 
4) Что такое volume?
5) Что такое layer?
6) Что такое network в докер компоуз?
7) Работал ли с Kubernetes?



