from Ch_2_Data_Types.Python_types import replace_sep_in_sting
import string

replace_sep_in_sting("""
""")

"""В Python вы можете объединить строки или строковые переменные с помощью
оператора +. Строки (не переменные) можно объединять, просто расположив их одну за
другой: "My word! " "A gentleman caller!"""

print("My word! " "A gentleman caller!")

"""Кроме отсутствия аргумента (когда подразумевается, что нужно найти пробелы)
или отдельного символа, возможна и ситуация, когда функция strip() удалит все
символы из последовательности"""
blurt = "What the...!!?"
print(blurt.strip('.?!'))
# string.whitespace 	#  \t\n\r\x0b\x0c
# string.punctuation  # !"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~
ex = '   #$ What in tarnation .. {}[]*('
print(ex.strip(string.punctuation + string.whitespace))

setup = 'a duck goes into a bar...'
"""Строка выравнивается в пределах указанного общего количества пробелов"""
print(setup.center(100))	# for center
print(setup.ljust(100))		# in the left
print(setup.rjust(100))		# in the right
"""Старый стиль: %
Старый стиль форматирования строк имеет форму строка % данные . Внутри строки
находятся интерполяционные последовательности. Самая простая последовательность — это 
символ % и буква. Буква указывает на тип данных, которые должны быть отформатированы. Вы можете 
использовать последовательность %s для любого типа данных — Python отформатирует их как строку 
без дополнительных пробелов. Рассмотрим несколько примеров. Сначала целое число:
'%s' -> '42', '%d' -> '42', '%x' -> '2a', '%o' -> '52' """
# %s Строка
# %d Целое число в десятичной системе счисления
# %x Целое число в шестнадцатеричной системе счисления
# %o Целое число в восьмеричной системе счисления
# %f Число с плавающей точкой в десятичной системе счисления
# %e Число с плавающей точкой в шестнадцатеричной системе счисления
# %g Число с плавающей точкой в восьмеричной системе счисления
# %% Символ %

"""
Новый стиль форматирования имеет вид <строка.format(данные)>.
Аргументы функции format() должны идти в том порядке, в котором расставлены заполнители {}
 в строке формата. 
thing = 'woodchuck', place = 'lake'
>>> 'The {} is in the {}.'.format(thing, place)

В новом стиле форматирования вы также можете указать позицию аргументов
следующим образом: Значение 0 относится к первому аргументу place , а 1 — к thing .
>>> 'The {1} is in the {0}.'.format(place, thing)
'The woodchuck is in the lake.'

Аргументы функции format() могут быть именованными:
>>> 'The {thing} is in the {place}'.format(thing='duck', place='bathtub')
'The duck is in the bathtub'

Они также могут быть словарями: d = {'thing': 'duck', 'place': 'bathtub'}
В следующем примере {0} — это первый аргумент функции format() (словарь d ):
'The {0[thing]} is in the {0[place]}.'.format(d)
'The duck is in the bathtub.'

"""



