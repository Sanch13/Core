from Ch_2_Data_Types.Python_types import replace_sep_in_sting
import copy

replace_sep_in_sting("""
""")


"""Большая часть работы программиста состоит из «разрезания» данных и «склеивания» их в 
конкретные формы, поэтому сейчас вы узнаете, как пользоваться ножовками и клеевыми пистолетами.
Большинство языков программирования могут представлять последовательность в виде объектов, 
проиндексированных по их позиции, выраженной целым числом: первый, второй и далее до последнего.
В Python есть еще две структуры-последовательности: кортежи и списки. Они могут содержать ноль и 
более элементов. В отличие от строк в кортежах и списках допускаются элементы разных типов: 
по факту каждый элемент может быть любым объектом Python. Это позволяет создавать структуры 
любой сложности и глубины Почему же в Python имеются как списки, так и кортежи? 
Кортежи неизменяемы. Когда вы включаете в кортеж элемент (всего один раз), он «запекается» и больше 
не изменяется. Списки же можно изменять — добавлять и удалять элементы в любой удобный момент..
"""

"""В тех случаях, когда у запятой могут быть и другие варианты использования, также рекомендуется 
ставить круглые скобки. В следующем примере вы можете создать кортеж с одним элементом и 
присвоить ему значение, поставив в конце запятую, но не можете передать эту конструкцию
 как аргумент функции:"""
one_marx = 'Groucho',   # ЛУЧШЕ УКАЗЫВАТЬ КОРТЕЖ ЯВНО  ('Groucho',)
type(one_marx)          # <class 'tuple'>
type('Groucho',)        # <class 'str'>
type(('Groucho',))      # <class 'tuple'>

"""Кортежи позволяют присваивать значение нескольким переменным одновременно.
Иногда это называется распаковкой кортежа.
"""
marx_tuple = ('Groucho', 'Chico', 'Harpo')
a, b, c = marx_tuple
"""Вы можете использовать кортежи для обмена значениями с помощью одного выражения, не применяя
временную переменную:"""
password = 'swordfish'
icecream = 'tuttifrutti'
password, icecream = icecream, password    # password='tuttifrutti' icecream='swordfish'

"""Списки особенно удобны для хранения в них объектов в определенном порядке, особенно если 
порядок или содержимое нужно будет изменить. В отличие от строк список изменяем: вы можете 
добавить новые элементы, перезаписать существующие и удалить ненужные. Одно и то же значение 
может встречаться в списке несколько раз."""

"""Функция list() преобразует другие итерабельные типы данных (например, кортежи, строки, 
множества и словари) в списки. В следующем примере строка преобразуется в список, состоящий 
из односимвольных строк:"""
list('cat')                                     # str --> ['c', 'a', 't']
list(('ready', 'fire', 'aim'))                  # tuple --> ['ready', 'fire', 'aim']
list({1, 2, 3, 4, 5, 6})                        # set --> [1, 2, 3, 4, 5, 6]
list({'a': 'one', 'b': 'two', 'c': 'three'})    # dict --> ['a', 'b', 'c']

"""Изменяем элементы с помощью разделения. То, что находится справа от = и что вы присваиваете 
списку, может содержать иное количество элементов, нежели список, указанный слева. На самом 
деле то, что находится справа от оператора присваивания, может даже не быть списком. Подойдет 
любой итерабельный объект, элементы которого можно сделать элементами списка."""

numbers = [1, 2, 3, 4]
numbers[1:3] = [7, 8, 9]        # numbers = [1, 7, 8, 9, 4]
numbers[1:3] = (98, 99, 100)    # numbers = [1, 98, 99, 100, 4]
numbers[1:3] = 'what?'          # numbers = [1, 'w', 'h', 'a', 't', '?', 4]

"""
Меняем порядок элементов с помощью функций sort() или sorted():
Функция списка sort(), которая сортирует сам список. Изменяет оригинальный список.
Если все элементы списка одного типа (в списке marxes находятся только строки), функция sort() 
отработает корректно. По умолчанию список сортируется по возрастанию, но можно добавить аргумент 
reverse=True, чтобы отсортировать список по убыванию.
Функция списка sorted(), возвращает отсортированную копию списка. Не изменяет оригинальный список.
"""
marxes = ['Groucho', 'Chico', 'Harpo']
sorted_marxes = sorted(marxes)          # ['Chico', 'Groucho', 'Harpo']
marxes.sort()                           # ['Chico', 'Groucho', 'Harpo']

numbers = [2, 1, 4.0, 3]
numbers.sort(reverse=True)              # [4.0, 3, 2, 1]


"""Копируем списки с помощью функций copy() и list() или путем разделения.
Опять же b_1, c_1 и d_1 являются копиями a_1, но новыми объектами со своими собственными значениями
и не связанными с исходным списком объектов [1, 2, 3], на который ссылается a_1. 
Изменение a_1 не влияет на копии  b_1, c_1 и d_1.
"""
a_1 = [1, 2, 3]     # a_1 --> [1, 2, 3]
b_1 = a_1.copy()    # b_1 --> [1, 2, 3]
c_1 = list(a_1)     # c_1 --> [1, 2, 3]
d_1 = a_1[:]        # d_1 --> [1, 2, 3]
a_1[0] = 'surprise'
# a_1 --> ['surprise', 2, 3]
# b_1 --> [1, 2, 3]
# c_1 --> [1, 2, 3]
# d_1 --> [1, 2, 3]
"""Функция copy() хорошо работает, если все элементы списка являются неизменяемыми.
Воспользуемся предыдущим примером, но в качестве последнего элемента списка a_1 вместо целого 
числа 3 используем список [8, 9]."""
a_2 = [1, 2, [8, 9]]     # a_2 --> [1, 2, [8, 9]]
b_2 = a_2.copy()         # b_2 --> [1, 2, [8, 9]]
c_2 = list(a_2)          # c_2 --> [1, 2, [8, 9]]
d_2 = a_2[:]             # d_2 --> [1, 2, [8, 9]]
"""Пока все хорошо. Теперь изменим элемент нашего подсписка из списка а_2."""
a_2[2][1] = 10
# a_2 --> [1, 2, [8, 10]]
# b_2 --> [1, 2, [8, 10]]
# c_2 --> [1, 2, [8, 10]]
# d_2 --> [1, 2, [8, 10]]
"""Для того чтобы это исправить, нужно использовать функцию deepcopy(). Функция deepcopy() может
работать с вложенными списками, словарями и другими объектами."""
a_3 = [1, 2, [8, 9]]
b_3 = copy.deepcopy(a_3)
# a_3 [1, 2, [8, 9]]
# b_3 [1, 2, [8, 9]]
a_3[2][1] = 10
# a_3 [1, 2, [8, 10]]
# b_3 [1, 2, [8, 9]]

"""Итерируем по нескольким последовательностямс помощью функции zip().
Есть еще один хороший прием — параллельное итерирование по нескольким последовательностям с 
помощью функции zip(). Функция zip() прекратит свою работу, когда будет выполнена самая короткая 
последовательность. Один из списков (desserts) оказался длиннее остальных, поэтому никто 
не получит пудинг, пока мы не увеличим остальные списки.
"""

days = ['Monday', 'Tuesday', 'Wednesday']
fruits = ['banana', 'orange', 'peach']
drinks = ['coffee', 'tea', 'beer']
desserts = ['tiramisu', 'ice cream', 'pie', 'pudding']
# for day, fruit, drink, dessert in zip(days, fruits, drinks, desserts):
#     print(day, ": drink", drink, "eat", fruit, "enjoy", dessert)
# Monday : drink coffee — eat banana — enjoy tiramisu
# Tuesday : drink tea — eat orange — enjoy ice cream
# Wednesday : drink beer — eat peach — enjoy pie

"""Функция zip() позволяет пройти по нескольким последовательностям и создать кортежи из
элементов с одинаковым смещением. Создадим два кортежа из соответствующих друг другу 
английских и французских слов. Теперь используем функцию zip(), чтобы объединить эти кортежи 
с составлением пар. Значение, возвращаемое функцией zip(), само по себе не является 
списком или кортежем, но его можно преобразовать в любую из этих последовательностей."""
english = ('Monday', 'Tuesday', 'Wednesday')
french = ('Lundi', 'Mardi', 'Mercredi')
list(zip(english, french))  # [('Monday', 'Lundi'), ('Tuesday', 'Mardi'), ('Wednesday', 'Mercredi')]
dict(zip(english, french))  # {'Monday': 'Lundi', 'Tuesday': 'Mardi', 'Wednesday': 'Mercredi'}

"""Создание списка с помощью списковых включений (их еще называют генераторами списков, 
представлением списков и т. д ). Более характерным для Python является создание списка 
с помощью списковых включений. Простейшая форма такого включения выглядит следующим образом:
[выражение for элемент in итерабельный объект].
[выражение for элемент in итерабельный объект if условие].
"""
number_list = [number for number in range(1, 6)]                # [1, 2, 3, 4, 5]
a_list = [number for number in range(1,6) if number % 2 == 1]   # [1, 3, 5]
"""Точно так же, как и при работе с вложенными циклами, можно написать более чем один 
набор операторов for...  в соответствующем включении."""
rows = range(1,4)   # [1, 2, 3]
cols = range(1,3)   # [1, 2]
cells = [(row, col) for row in rows for col in cols]
# cells = [(1, 1), (1, 2), (2, 1), (2, 2), (3, 1), (3, 2)]
# for cell in cells:
#     print(f'{cell} ', end='')  # (1, 1) (1, 2) (2, 1) (2, 2) (3, 1) (3, 2)



# TASKS   TASKS   TASKS   TASKS   TASKS   TASKS   TASKS   TASKS   TASKS   TASKS   TASKS   TASKS
""" 7 1. Создайте список years_list, содержащий год, в который вы родились, и каждый 
последующий год вплоть до вашего пятого дня рождения. Например, если вы родились в 1980 году, 
список будет выглядеть так: years_list = [1980, 1981, 1982, 1983, 1984, 1985]
Если вам меньше пяти лет, но вы уже читаете эту книгу, то я даже не знаю, что сказать.
"""
years_list = [year for year in range(1985, 1991)]   # [1985, 1986, 1987, 1988, 1989, 1990]
###################################################################################################
"""7 2. В какой год из списка years_list был ваш третий день рождения?
Учтите, в первый год вам было 0 лет."""
# years_list[3] # 1988
###################################################################################################
"""7 3. В какой год из списка years_list вам было больше всего лет?."""
# years_list[-1] # 1990
###################################################################################################
"""7 4. Создайте список things, содержащий три элемента: "mozzarella", "cinderella", 
"salmonella". 
7 5.  Напишите с большой буквы тот элемент списка things, который означает человека, а 
затем выведите список. Изменился ли элемент списка?
7 6.  Переведите сырный элемент списка things в верхний регистр целиком и выведите список 
7 7.  Удалите из списка things заболевание, получите Нобелевскую премию и затем выведите 
список на экран."""
things = ["mozzarella", "cinderella", "salmonella"]
things[1] = "Cinderella"
# things  # ['mozzarella', 'Cinderella', 'salmonella']
things[0] = things[0].upper()
# things  # ['MOZZARELLA', 'Cinderella', 'salmonella']
things.remove('salmonella')  # del things[-1]
# things  # ['MOZZARELLA', 'Cinderella']
###################################################################################################
"""7 8.  Создайте список с элементами "Groucho", "Chico" и "Harpo"; назовите его surprise. 
7 9.  Напишите последний элемент списка surprise со строчной буквы, затем выведите эту строку 
в обратном порядке и с прописной буквы."""
surprise = ["Groucho", "Chico", "Harpo"]
surprise[-1] = surprise[-1].lower()[::-1].capitalize()  # Oprah
###################################################################################################
"""7 10. Используйте списковое включение, чтобы создать список с именем even, в котором
будут содержаться четные числа в промежутке range(10)."""
even = [number for number in range(10) if number % 2 == 0]  # [0, 2, 4, 6, 8]
###################################################################################################
"""7 11. Попробуйте создать генератор рифм для прыжков через скакалку. Напечатайте 
последовательность двухстрочных рифм.
Следуйте инструкциям 
Для каждого кортежа (first, second) в списке rhymes 
Для первой строки:
    выведите на экран каждую строку списка start1: начните ее с большой буквы, а закончите 
    восклицательным знаком с пробелом;
    выведите на экран значение переменной first, также записав его с большой буквы и с 
    восклицательным знаком на конце 
Для второй строки:
    выведите на экран значение переменной start2 и пробел;
    выведите на экран значение переменной second и точку."""
start1 = ["fee", "fie", "foe"]
rhymes = [
        ("flop", "get a mop"),
        ("fope", "turn the rope"),
        ("fa", "get your ma"),
        ("fudge", "call the judge"),
        ("fat", "pet the cat"),
        ("fog", "walk the dog"),
        ("fun", "say we're done"),
        ]
start2 = "Someone better"
str_start1 = ' '.join([word.capitalize() + '!' for word in start1])
for first, second in rhymes:
    print(f'{str_start1} {first.capitalize()}!')
    print(f'{start2} {second}.')

