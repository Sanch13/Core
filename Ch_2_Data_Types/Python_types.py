# Имя                       Тип       Изменяемый? Примеры
# Булево.значение           bool       Нет        True, False
# Целое.число               int        Нет        47, 25000, 25_000
# Число.с.плавающей точкой  float      Нет        3.14, 2.7e5
# Комплексное число         complex    Нет        3j,5 + 9j
# Текстовая строка          str        Нет        'alas',"alack",'''a verse attack'''
# Кортеж                    tuple      Нет         (2,4, 8)
# Байты                     bytes      Нет         b'ab\xff'
# Фиксированное множество   frozenset  Нет         frozenset(['Elsa','Otto'])
# Словарь                   dict       Да          {'game':'bingo','dog':'dingo','drummer':'Ringo'}
# Список                    list       Да          ['Winken','Blinken','Nod']
# Массив байтов             bytearray  Да          bytearray(…)
# Множество                 set        Да          set([3, 5, 7])


def replace_sep_in_sting(string):
    out_string = ' '.join(string.split('.'))
    print(out_string.replace('  ', '. ').strip() + '.')


def main():
    """Python является строго типизированным языком, а это означает, что тип объекта не изменяется,
    даже если его значение изменяемо"""
    a = 5
    print(f'a = {a}', type(a), id(a))   # a = 5 <class 'int'>
    b = str(a)
    print(f'b = {b}', type(b), id(b))   # b = 5 <class 'str'>
    print(a is b, a == b)               # False False

    """В нашем примере c и d указывают на список, содержащий три целочисленных объекта"""
    c = d = [2, 4, 6]   # [2, 4, 6]
    """Эти элементы списка (c[0], c[1] и c[2]) сами по себе являются именами, указывающими на целочисленные объекты
    со значениями 2, 4 и 6. Список хранит элементы в заданном порядке. Теперь давайте изменим первый элемент списка
    с помощью имени c и убедимся, что список d также изменился. Когда первый элемент списка изменяется, он больше
    не указывает на объект со значением 2. Теперь он указывает на объект со значением 99. Список все еще имеет
    тип list, но его значения (элементы списка и их порядок) можно изменить."""
    c[0] = 99
    print(c, d)         # [99, 4, 6]
    print(type(None))   # <class 'NoneType'>
    print(bool(False), bool(0), bool(0.0), bool(None))  # False False False False


if __name__ == '__main__':
    main()
