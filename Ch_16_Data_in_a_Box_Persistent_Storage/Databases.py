import string

"""Реляционные базы данных
Реляционным базам данных всего около 40 лет, но в компьютерном мире они используются повсеместно.
Преимущества:
- Доступ к данным возможен для нескольких пользователей одновременно.
- Действует защита от повреждения данных пользователями.
- Существуют эффективные методы сохранения и считывания данных.
- Данные определены схемами и имеют ограничения.
- Объединения позволяют найти отношения между различными типами данных.
- Декларативный (в противоположность императивному) язык запросов SQL (Structured Query Language).
"""
"""Такие базы данных называются реляционными, поскольку они показывают отношения между различными
типами данных в форме прямоугольных таблиц."""
"""Таблица представляет собой прямоугольную сетку столбцов (полей данных) и строк 
(отдельных записей), похожую на электронную таблицу. Пересечение строки и столбца называется
ячейкой. Чтобы создать таблицу, необходимо указать ее имя и порядок, имена и типы ее столбцов.
Каждая строка имеет одинаковые столбцы, хотя столбец может быть определен так, чтобы в ячейках
отсутствовали данные (null)."""

"""Первичным ключом таблицы является столбец или группа столбцов. Значения ключа должны быть
уникальными — таким образом предотвращается ввод одинаковых данных в таблицу. Этот ключ
индексируется для быстрого поиска во время выполнения запроса. Работа индекса немного похожа
на работу алфавитного указателя, который позволяет быстро найти определенный ряд. Каждая таблица
находится внутри родительской базы данных, как файлы в каталоге. Два уровня иерархии позволяют
немного лучше организовывать данные."""

"""Если вы хотите найти строки по определенному неключевому значению, определите для столбца
вторичный индекс. В противном случае база данных должна будет выполнить сканирование таблицы
— поиск нужного значения перебором всех строк. Таблицы могут быть связаны друг с другом с помощью
внешних ключей, и значения столбцов могут быть ограничены этими ключами"""

"""SQL
SQL не является API или протоколом. Это декларативный язык: вы говорите, что вам нужно, а не
как это сделать. SQL — универсальный язык реляционных баз данных. Запросы SQL являются 
текстовыми строками: клиент отсылает их серверу базы данных, а тот определяет, что с ними
делать дальше."""

"""Существует несколько стандартов определения SQL, но все поставщики баз данных добавили
свои собственные настройки и расширения, что привело к появлению множества диалектов SQL. 
Если вы храните данные в реляционной базе данных, SQL дает вам некоторую переносимость данных. 
Однако наличие диалектов и операционных различий может усложнить перенос данных в другую базу."""

"""Есть две основные категории утверждений SQL.
- DDL (Data Definition Language — язык определения данных). Обрабатывает создание, удаление, 
ограничения и разрешения для таблиц, баз данных и пользователей.
- DML (Data Manipulation Language — язык манипулирования данными). 
Обрабатывает добавление данных, их выборку, обновление и удаление"""
##################################################################################################
""" Основные команды SQL DDL"""
#       Операция                     Шаблон SQL                Пример SQL

# Создание базы данных          CREATE DATABASE имя_базы    CREATE DATABASE d

# Выбор текущей базы данных     USE имя_базы                USE d

# Удаление базы данных          DROP DATABASE имя_базы      DROP DATABASE d
# и ее таблиц

# Создание таблицы              CREATE TABLE имя_таблицы    CREATE TABLE t
#                                  (описания_столбцов)      (id INT, count INT)

# Удаление таблицы              DROP TABLE имя_таблицы      DROP TABLE t

# Удаление всех строк таблицы   TRUNCATE TABLE имя_таблицы  TRUNCATE TABLE t
##################################################################################################
"""Язык SQL не зависит от регистра, но по традиции ключевые слова ВЫКРИКИВАЮТСЯ, чтобы их можно
было отличить от имен столбцов."""
"""Основные операции DML реляционной базы данных можно запомнить с помощью акронима CRUD:
- Create — создание с помощью оператора SQL INSERT;
- Read — чтение с помощью SELECT;
- Update — обновление с помощью UPDATE;
- Delete — удаление с помощью DELETE.
"""
##################################################################################################
"""Основные команды SQL DML"""
# Операция                          Шаблон SQL                      Пример SQL

# Добавление строки             INSERT INTO имя_таблицы         INSERT INTO t VALUES(7, 40)
#                                   VALUES(…)

# Выборка всех строк            SELECT * FROM имя_таблицы       SELECT * FROM t
# и столбцов                    SELECT * FROM t

# Выборка всех строк            SELECT cols FROM имя_таблицы    SELECT id, count FROM t
# и некоторых столбцов

# Выборка некоторых строк       SELECT cols FROM                SELECT id, count from t
# и некоторых столбцов          имя_таблицы WHERE условие       WHERE count > 5 AND id = 9

# Изменение некоторых           UPDATE имя_таблицы SET          UPDATE t SET count = 3
# строк в столбце               col = значение WHERE условие    WHERE id = 5

# Удаление некоторых строк      DELETE FROM имя_таблицы         DELETE FROM t WHERE
#                               WHERE условие                   count <= 10 OR id = 16
###################################################################################################
"""DB-API
Программный интерфейс приложения (Application Programming Interface, API) —это набор функций,
которые вы можете вызвать, чтобы получить доступ к какойлибо услуге. 
DB-API (http://bit.ly/db-api) — это стандартный API в Python, предназначенный для получения
доступа к реляционным базам данных. С его помощью вы можете написать одну программу,
которая работает с несколькими видами реляционных баз данных, вместо того чтобы писать
несколько программ для работы с каждым видом баз данных по отдельности."""
"""Рассмотрим его основные функции:
- connect() — создание соединения с базой данных. Этот вызов может включать
в себя такие аргументы, как имя пользователя, пароль, адреса сервера и пр.;
- cursor() — создание объекта курсора, предназначенного для работы с запросами;
- execute() и executemany() — запуск одной или нескольких команд SQL;
- fetchone(), fetchmany() и fetchall() — получение результатов работы функции
execute()."""

"""SQLite
SQLite (http://www.sqlite.org/) — это хорошая легкая реляционная база данных с открытым
исходным кодом. Она реализована как стандартная библиотека Python и хранит базы данных в
обычных файлах. Эти файлы можно переносить в другие машины и операционные системы, что
делает SQLite портативным решением для простых приложений реляционных баз данных."""
"""Работа начинается с вызова connect() для установки соединения с локальным
файлом базы данных, который вы хотите создать или использовать. Этот файл
эквивалентен похожей на каталог базе данных, которая хранит таблицы на других
серверах. С помощью специальной строки ':memory:' можно создать базу данных
только в памяти — это быстро и удобно для тестирования, но данные будут потеряны
при завершении программы или выключении компьютера."""
"""создадим базу данных enterprise.db и таблицу zoo
critter — строка переменной длины, наш первичный ключ
count — целочисленное количество единиц используемого инвентаря для этого животного
damages — сумма, выраженная в долларах, наших убытков.
"""
import sqlite3
conn = sqlite3.connect('enterprise.db')
curs = conn.cursor()
curs.execute("""CREATE TABLE IF NOT EXISTS zoo
             (critter VARCHAR(20) PRIMARY KEY,
             count INT,
             damages FLOAT)""")
"""Существует безопасный способ добавить данные — использовать заполнитель
добавление строки со значениями соответствено стобцам  кортеж значений соответ. столбцам
"""
ins = 'INSERT INTO zoo (critter, count, damages) VALUES(?, ?, ?)'
"""мы использовали в запросе три вопросительных знака, чтобы показать, что мы планируем
вставить три значения, а затем передать эти значения в виде кортежа в функцию execute(). 
Передаем в кортеже данные согласно стобцам таблицы."""
curs.execute(ins, ('weasel', 1, 2000.0))    # ввод данных в таблицу zoo.
curs.execute(ins, ("bear", 2, 1000.0))      # ввод данных в таблицу zoo.
curs.execute(ins, ("duck", 5, 0.0))         # ввод данных в таблицу zoo.
"""Выведем все наши записи животных"""
curs.execute('SELECT * FROM zoo')   # делаем запрос на вывод всех столбцов и строк
rows = curs.fetchall()              # считываем значения из БД и помещаем их в rows
print(rows)                         # вывод списка в консоль
"""упорядочим список по количеству животных в нисходящем порядке"""
curs.execute('SELECT * from zoo ORDER BY count DESC')   # делаем запрос на вывод всех столбцов
# и строк, но по кол-ву животных count. от большего к малому
rows = curs.fetchall()              # считываем значения из БД и помещаем их в rows
print(rows)                         # вывод списка в консоль
"""Какие животные обходятся нам дороже всего?"""
curs.execute('''SELECT * FROM zoo WHERE damages = (SELECT MAX(damages) FROM zoo)''')
print(curs.fetchall())  # [('weasel', 1, 2000.0)]
curs.close()    # закрываем соединение курсора
conn.close()    # закрываем соединение с БД













