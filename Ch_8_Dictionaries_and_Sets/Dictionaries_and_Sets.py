"""В других языках словари могут называться ассоциативными массивами, хешами или хеш-таблицей.
В Python словарь также принято называть dict. Создаем словарь с помощью {}
Чтобы создать словарь, нужно заключить в фигурные скобки ({}) разделенные запятыми
пары ключ : значение. Самым простым словарем является пустой словарь, не содержащий
ни ключей, ни значений.
Некоторым людям не нравится печатать так много фигурных скобок и кавычек.
И вы можете создать словарь, передав именованные аргументы и значения в функцию dict().
Традиционный способ создания словаря:
acme_customer = {'first': 'Wile', 'middle': 'E', 'last': 'Coyote'}
{'first': 'Wile', 'middle': 'E', 'last': 'Coyote'}
С использованием dict():
acme_customer = dict(first="Wile", middle="E", last="Coyote")
{'first': 'Wile', 'middle': 'E', 'last': 'Coyote'}
Одним из ограничений второго способа является то, что имена аргументов должны представлять
собой корректные имена переменных (в них не должны использоваться пробелы и ключевые слова):
x = dict(name="Elmer", def="hunter")
File "<stdin>", line 1
x = dict(name="Elmer", def="hunter")
                        ^
SyntaxError: invalid syntax
"""
some_pythons = {'Graham': 'Chapman', 'John': 'Cleese', 'Eric': 'Idle'}
"""Лучше всего использовать специальную функцию словаря get(). Вы указываете словарь, ключ и 
опциональное значение. Если ключ существует, вы получите связанное с ним значение:"""
some_pythons.get('John')     # --> 'Cleese'
"""Если такого ключа нет, вы получите опциональное значение:
some_pythons.get('Groucho', 'Not a Python')  # 'Not a Python'
В противном случае вам будет возвращен объект None (интерактивный интерпретатор ничего не выведет):
some_pythons.get('Groucho')  # None
"""
some_pythons.get('Groucho')     # None
list(some_pythons.keys())       # ['Graham', 'John', 'Eric']
list(some_pythons.values())     # ['Chapman', 'Cleese', 'Idle']
list(some_pythons.items())      # [('Graham', 'Chapman'), ('John', 'Cleese'), ('Eric', 'Idle')]
"""В версиях Python 3.5 и выше есть новый способ объединять словари с помощью конструкции ** """
first = {'a': 'agony', 'b': 'bliss'}
second = {'b': 'bagels', 'c': 'candy'}
result = {**first, **second}    # {'a': 'agony', 'b': 'bagels', 'c': 'candy'}
"""Фактически вы можете передать в качестве параметров больше двух словарей"""
third = {'d': 'donuts'}
result2 = {**first, **third, **second}  # {'a': 'agony', 'b': 'bagels', 'd': 'donuts', 'c': 'candy'}
"""Объединяем словари с помощью функции update()"""
f = {'a': 1, 'b': 2}
s = {'c': 3}
f.update(s)     # {'a': 1, 'b': 2, 'c': 3}
"""Если во втором словаре будут находиться такие же ключи, что и в первом? Победит значение 
из второго словаря"""
ft = {'a': 1, 'b': 2}
sd = {'b': 'platypus'}
ft.update(sd)   # {'a': 1, 'b': 'platypus'}
"""Удаляем элементы по их ключу с помощью оператора del"""
del ft["a"]  # {'b': 'platypus'}
"""Получаем элемент по ключу и удаляем его с помощью функции pop(). В этой функции объединены 
функции get() и del. Если вы передадите функции pop() ключ в качестве аргумента и такой 
ключ имеется в словаре, она вернет соответствующее значение и удалит пару. Если ключа в 
словаре нет, будет сгенерировано исключение"""
pythons = {'Chapman': 'Graham', 'Cleese': 'John', 'Gilliam': 'Terry'}
pythons.pop('Chapman')  # Останется {'Cleese': 'John', 'Gilliam': 'Terry',}
"""Но если вы передадите функции pop() второй аргумент по умолчанию, словарь не изменится. 
Если такого ключа нет в словаре вернет второе установленное значение"""
pythons.pop('Chapman', None)  # None
"""Удаляем все элементы с помощью функции clear(). Чтобы удалить все ключи и значения из словаря,
вам следует использовать функцию clear() или просто переназначить заданному имени пустой словарь"""
pythons.clear()  # {}
pythons = {}     # {}
"""Если значения словаря изменяются, следует использовать функцию deepcopy()"""
"""Сравниваем словари. Словари можно сравнивать с помощью операторов == и !=. Другие операторы 
не будут работать. Python сравнивает ключи и значения по одному. Порядок, в котором они 
создавались, не имеет значения"""
a = {1:1, 2:2, 3:3}
b = {3:3, 1:1, 2:2}
# a == b  # True
"""Включения словарей. У словарей также существуют включения. Простейшая форма выглядит знакомо:
{выражение для ключа : выражение для значения for выражение in итерабельный объект}"""
word = 'letters'
letter_counts = {letter: word.count(letter) for letter in set(word)}
# letter_counts = {'e': 2, 't': 2, 's': 1, 'l': 1, 'r': 1}
"""По аналогии со списковыми включениями для генератора словарей также можно использовать 
условные проверки if и более одного блока for:
{выражение для ключа : выражение для значения for выражение in итерабельный объект if условие}"""
vowels = 'aeiou'
word_1 = 'onomatopoeia'
vowel_counts = {letter: word.count(letter) for letter in set(word_1) if letter in vowels}
#  vowel_counts = {'e': 2, 'o': 0, 'a': 0, 'i': 0}









