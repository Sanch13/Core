import os, time
import subprocess
import multiprocessing

"""Ваша операционная система создает один процесс, который использует системные ресурсы 
(центральный процессор, память,место на диске) и структуры данных в ядре операционной системы
(файлы и сетевыесоединения, статистику использования и т. д.). Процесс изолирован от других 
процессов — он не может видеть, что делают другие процессы, или мешать им.Операционная система 
отслеживает все запущенные процессы, выделяя каждому из них немного времени и затем переключаясь
на другие, для того чтобы справедливо распределять работу и реагировать на действия пользователя.
Модуль стандартной библиотеки os предоставляет общий способ доступа к определенной системной
информации. Следующие функции получают идентификатор процесса и текущую рабочую папку запущенного
интерпретатора Python
"""
# print(os.getpid())  # идентификатор процесса 12832
# print(os.getcwd())  # E:\Projects\Core_Python\Ch_15_Data_in_Time_Processes_and_Concurrency
"""Создаем процесс с помощью модуля subprocess Все программы, с которыми вы сталкивались до 
этого момента, представляли собой отдельные процессы. Запускать и останавливать другие существующие
в Python программы можно, используя модуль subprocess из стандартной библиотеки."""
# print(subprocess.getoutput('date'))

"""Убиваем процесс, используя функцию terminate(). Если вы создали один или несколько процессов,
а теперь по какой-то причине хотите их завершить  используйте функцию terminate()."""
# def whoami(name):
#     print("I'm %s, in process %s" % (name, os.getpid()))
#
# def loopy(name):
#     whoami(name)
#     start = 1
#     stop = 1000000
#     for num in range(start, stop):
#         print("\tNumber %s of %s. Honk!" % (num, stop))
#         time.sleep(1)
#
# if __name__ == "__main__":
#     whoami("main")
#     p = multiprocessing.Process(target=loopy, args=("loopy",))
#     p.start()
#     time.sleep(5)
#     p.terminate()

"""Получаем системную информацию с помощью модуля os 
Стандартный пакет os предоставляет подробную информацию о вашей системе и позволяет управлять 
некоторыми функциями, запуская скрипт, написанный на Python, от лица привилегированного 
пользователя (например, администратора)."""
# print(os.name, os.path) # nt <module 'ntpath' from 'C:\\Python39\\lib\\ntpath.py'>
"""Имеется также полезная функция system(), которая выполняет командную строку так, как если
 бы вы ввели ее в консоли"""
# os.system('shutdown -s -t 3600')
# os.system('shutdown -a')

"""$ pip install invoke
Одним из вариантов использования пакета invoke является возможность сделать
функции доступными в качестве аргументов командной строки."""

# TASKS   TASKS   TASKS   TASKS   TASKS   TASKS   TASKS   TASKS   TASKS   TASKS   TASKS   TASKS
import random


def says():
    wait = random.random()
    time.sleep(wait)
    print(f"I have been waiting {wait:.03} seconds and local time {time.strftime('%H:%M:%S')}")


if __name__ == "__main__":
    for n in range(3):
        p = multiprocessing.Process(target=says)
        p.start()
###################################################################################################





